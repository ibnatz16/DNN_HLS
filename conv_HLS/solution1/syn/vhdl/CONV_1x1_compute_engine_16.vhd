-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CONV_1x1_compute_engine_16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    w0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b0 : IN STD_LOGIC_VECTOR (15 downto 0);
    w1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b1 : IN STD_LOGIC_VECTOR (15 downto 0);
    w2 : IN STD_LOGIC_VECTOR (7 downto 0);
    b2 : IN STD_LOGIC_VECTOR (15 downto 0);
    w3 : IN STD_LOGIC_VECTOR (7 downto 0);
    b3 : IN STD_LOGIC_VECTOR (15 downto 0);
    w4 : IN STD_LOGIC_VECTOR (7 downto 0);
    b4 : IN STD_LOGIC_VECTOR (15 downto 0);
    w5 : IN STD_LOGIC_VECTOR (7 downto 0);
    b5 : IN STD_LOGIC_VECTOR (15 downto 0);
    w6 : IN STD_LOGIC_VECTOR (7 downto 0);
    b6 : IN STD_LOGIC_VECTOR (15 downto 0);
    w7 : IN STD_LOGIC_VECTOR (7 downto 0);
    b7 : IN STD_LOGIC_VECTOR (15 downto 0);
    w8 : IN STD_LOGIC_VECTOR (7 downto 0);
    b8 : IN STD_LOGIC_VECTOR (15 downto 0);
    w9 : IN STD_LOGIC_VECTOR (7 downto 0);
    b9 : IN STD_LOGIC_VECTOR (15 downto 0);
    w10 : IN STD_LOGIC_VECTOR (7 downto 0);
    b10 : IN STD_LOGIC_VECTOR (15 downto 0);
    w11 : IN STD_LOGIC_VECTOR (7 downto 0);
    b11 : IN STD_LOGIC_VECTOR (15 downto 0);
    w12 : IN STD_LOGIC_VECTOR (7 downto 0);
    b12 : IN STD_LOGIC_VECTOR (15 downto 0);
    w13 : IN STD_LOGIC_VECTOR (7 downto 0);
    b13 : IN STD_LOGIC_VECTOR (15 downto 0);
    w14 : IN STD_LOGIC_VECTOR (7 downto 0);
    b14 : IN STD_LOGIC_VECTOR (15 downto 0);
    w15 : IN STD_LOGIC_VECTOR (7 downto 0);
    b15 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (30 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of CONV_1x1_compute_engine_16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal b15_read_reg_626 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal w15_read_reg_631 : STD_LOGIC_VECTOR (7 downto 0);
    signal b13_read_reg_636 : STD_LOGIC_VECTOR (15 downto 0);
    signal w13_read_reg_641 : STD_LOGIC_VECTOR (7 downto 0);
    signal b11_read_reg_646 : STD_LOGIC_VECTOR (15 downto 0);
    signal w11_read_reg_651 : STD_LOGIC_VECTOR (7 downto 0);
    signal b9_read_reg_656 : STD_LOGIC_VECTOR (15 downto 0);
    signal w9_read_reg_661 : STD_LOGIC_VECTOR (7 downto 0);
    signal b7_read_reg_666 : STD_LOGIC_VECTOR (15 downto 0);
    signal w7_read_reg_671 : STD_LOGIC_VECTOR (7 downto 0);
    signal b5_read_reg_676 : STD_LOGIC_VECTOR (15 downto 0);
    signal w5_read_reg_681 : STD_LOGIC_VECTOR (7 downto 0);
    signal b3_read_reg_686 : STD_LOGIC_VECTOR (15 downto 0);
    signal w3_read_reg_691 : STD_LOGIC_VECTOR (7 downto 0);
    signal b0_read_reg_696 : STD_LOGIC_VECTOR (15 downto 0);
    signal w0_read_reg_701 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_498_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_505_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_512_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_519_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_526_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_533_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_540_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_547_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_554_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_563_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1192_2_fu_403_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1192_1_fu_400_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1192_3_fu_406_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_572_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_581_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1192_5_fu_419_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1192_4_fu_416_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1192_6_fu_422_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1192_6_fu_428_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1192_3_fu_412_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1192_7_fu_432_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_590_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_599_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1192_9_fu_445_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1192_8_fu_442_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1192_10_fu_448_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_608_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_617_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1192_12_fu_461_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1192_11_fu_458_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1192_13_fu_464_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1192_13_fu_470_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1192_10_fu_454_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1192_14_fu_474_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1192_14_fu_480_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1192_7_fu_438_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln1192_fu_484_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_s_fu_490_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_498_ce : STD_LOGIC;
    signal grp_fu_505_ce : STD_LOGIC;
    signal grp_fu_512_ce : STD_LOGIC;
    signal grp_fu_519_ce : STD_LOGIC;
    signal grp_fu_526_ce : STD_LOGIC;
    signal grp_fu_533_ce : STD_LOGIC;
    signal grp_fu_540_ce : STD_LOGIC;
    signal grp_fu_547_ce : STD_LOGIC;
    signal grp_fu_554_ce : STD_LOGIC;
    signal grp_fu_563_ce : STD_LOGIC;
    signal grp_fu_572_ce : STD_LOGIC;
    signal grp_fu_581_ce : STD_LOGIC;
    signal grp_fu_590_ce : STD_LOGIC;
    signal grp_fu_599_ce : STD_LOGIC;
    signal grp_fu_608_ce : STD_LOGIC;
    signal grp_fu_617_ce : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal w0_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b0_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w1_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b1_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w2_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b2_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w3_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b3_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w4_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b4_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w5_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b5_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w6_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b6_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w7_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b7_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w8_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b8_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w9_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b9_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w10_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b10_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w11_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b11_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w12_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b12_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w13_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b13_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w14_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b14_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w15_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b15_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (30 downto 0);

    component CONV_1x1_mul_mul_16s_8s_24_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CONV_1x1_mac_muladd_16s_8s_24s_25_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    mul_mul_16s_8s_24_4_0_U1 : component CONV_1x1_mul_mul_16s_8s_24_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b1_int_reg,
        din1 => w1_int_reg,
        ce => grp_fu_498_ce,
        dout => grp_fu_498_p2);

    mul_mul_16s_8s_24_4_0_U2 : component CONV_1x1_mul_mul_16s_8s_24_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b2_int_reg,
        din1 => w2_int_reg,
        ce => grp_fu_505_ce,
        dout => grp_fu_505_p2);

    mul_mul_16s_8s_24_4_0_U3 : component CONV_1x1_mul_mul_16s_8s_24_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b4_int_reg,
        din1 => w4_int_reg,
        ce => grp_fu_512_ce,
        dout => grp_fu_512_p2);

    mul_mul_16s_8s_24_4_0_U4 : component CONV_1x1_mul_mul_16s_8s_24_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b6_int_reg,
        din1 => w6_int_reg,
        ce => grp_fu_519_ce,
        dout => grp_fu_519_p2);

    mul_mul_16s_8s_24_4_0_U5 : component CONV_1x1_mul_mul_16s_8s_24_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b8_int_reg,
        din1 => w8_int_reg,
        ce => grp_fu_526_ce,
        dout => grp_fu_526_p2);

    mul_mul_16s_8s_24_4_0_U6 : component CONV_1x1_mul_mul_16s_8s_24_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b10_int_reg,
        din1 => w10_int_reg,
        ce => grp_fu_533_ce,
        dout => grp_fu_533_p2);

    mul_mul_16s_8s_24_4_0_U7 : component CONV_1x1_mul_mul_16s_8s_24_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b12_int_reg,
        din1 => w12_int_reg,
        ce => grp_fu_540_ce,
        dout => grp_fu_540_p2);

    mul_mul_16s_8s_24_4_0_U8 : component CONV_1x1_mul_mul_16s_8s_24_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b14_int_reg,
        din1 => w14_int_reg,
        ce => grp_fu_547_ce,
        dout => grp_fu_547_p2);

    mac_muladd_16s_8s_24s_25_4_0_U9 : component CONV_1x1_mac_muladd_16s_8s_24s_25_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b0_read_reg_696,
        din1 => w0_read_reg_701,
        din2 => grp_fu_498_p2,
        ce => grp_fu_554_ce,
        dout => grp_fu_554_p3);

    mac_muladd_16s_8s_24s_25_4_0_U10 : component CONV_1x1_mac_muladd_16s_8s_24s_25_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b3_read_reg_686,
        din1 => w3_read_reg_691,
        din2 => grp_fu_505_p2,
        ce => grp_fu_563_ce,
        dout => grp_fu_563_p3);

    mac_muladd_16s_8s_24s_25_4_0_U11 : component CONV_1x1_mac_muladd_16s_8s_24s_25_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b5_read_reg_676,
        din1 => w5_read_reg_681,
        din2 => grp_fu_512_p2,
        ce => grp_fu_572_ce,
        dout => grp_fu_572_p3);

    mac_muladd_16s_8s_24s_25_4_0_U12 : component CONV_1x1_mac_muladd_16s_8s_24s_25_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b7_read_reg_666,
        din1 => w7_read_reg_671,
        din2 => grp_fu_519_p2,
        ce => grp_fu_581_ce,
        dout => grp_fu_581_p3);

    mac_muladd_16s_8s_24s_25_4_0_U13 : component CONV_1x1_mac_muladd_16s_8s_24s_25_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b9_read_reg_656,
        din1 => w9_read_reg_661,
        din2 => grp_fu_526_p2,
        ce => grp_fu_590_ce,
        dout => grp_fu_590_p3);

    mac_muladd_16s_8s_24s_25_4_0_U14 : component CONV_1x1_mac_muladd_16s_8s_24s_25_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b11_read_reg_646,
        din1 => w11_read_reg_651,
        din2 => grp_fu_533_p2,
        ce => grp_fu_599_ce,
        dout => grp_fu_599_p3);

    mac_muladd_16s_8s_24s_25_4_0_U15 : component CONV_1x1_mac_muladd_16s_8s_24s_25_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b13_read_reg_636,
        din1 => w13_read_reg_641,
        din2 => grp_fu_540_p2,
        ce => grp_fu_608_ce,
        dout => grp_fu_608_p3);

    mac_muladd_16s_8s_24s_25_4_0_U16 : component CONV_1x1_mac_muladd_16s_8s_24s_25_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b15_read_reg_626,
        din1 => w15_read_reg_631,
        din2 => grp_fu_547_p2,
        ce => grp_fu_617_ce,
        dout => grp_fu_617_p3);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                    ap_return_int_reg(30 downto 3) <= p_Val2_s_fu_490_p3(30 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                b0_int_reg <= b0;
                b10_int_reg <= b10;
                b11_int_reg <= b11;
                b12_int_reg <= b12;
                b13_int_reg <= b13;
                b14_int_reg <= b14;
                b15_int_reg <= b15;
                b1_int_reg <= b1;
                b2_int_reg <= b2;
                b3_int_reg <= b3;
                b4_int_reg <= b4;
                b5_int_reg <= b5;
                b6_int_reg <= b6;
                b7_int_reg <= b7;
                b8_int_reg <= b8;
                b9_int_reg <= b9;
                w0_int_reg <= w0;
                w10_int_reg <= w10;
                w11_int_reg <= w11;
                w12_int_reg <= w12;
                w13_int_reg <= w13;
                w14_int_reg <= w14;
                w15_int_reg <= w15;
                w1_int_reg <= w1;
                w2_int_reg <= w2;
                w3_int_reg <= w3;
                w4_int_reg <= w4;
                w5_int_reg <= w5;
                w6_int_reg <= w6;
                w7_int_reg <= w7;
                w8_int_reg <= w8;
                w9_int_reg <= w9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                b0_read_reg_696 <= b0_int_reg;
                b11_read_reg_646 <= b11_int_reg;
                b13_read_reg_636 <= b13_int_reg;
                b15_read_reg_626 <= b15_int_reg;
                b3_read_reg_686 <= b3_int_reg;
                b5_read_reg_676 <= b5_int_reg;
                b7_read_reg_666 <= b7_int_reg;
                b9_read_reg_656 <= b9_int_reg;
                w0_read_reg_701 <= w0_int_reg;
                w11_read_reg_651 <= w11_int_reg;
                w13_read_reg_641 <= w13_int_reg;
                w15_read_reg_631 <= w15_int_reg;
                w3_read_reg_691 <= w3_int_reg;
                w5_read_reg_681 <= w5_int_reg;
                w7_read_reg_671 <= w7_int_reg;
                w9_read_reg_661 <= w9_int_reg;
            end if;
        end if;
    end process;
    ap_return_int_reg(2 downto 0) <= "000";
    add_ln1192_10_fu_448_p2 <= std_logic_vector(signed(sext_ln1192_9_fu_445_p1) + signed(sext_ln1192_8_fu_442_p1));
    add_ln1192_13_fu_464_p2 <= std_logic_vector(signed(sext_ln1192_12_fu_461_p1) + signed(sext_ln1192_11_fu_458_p1));
    add_ln1192_14_fu_474_p2 <= std_logic_vector(signed(sext_ln1192_13_fu_470_p1) + signed(sext_ln1192_10_fu_454_p1));
    add_ln1192_3_fu_406_p2 <= std_logic_vector(signed(sext_ln1192_2_fu_403_p1) + signed(sext_ln1192_1_fu_400_p1));
    add_ln1192_6_fu_422_p2 <= std_logic_vector(signed(sext_ln1192_5_fu_419_p1) + signed(sext_ln1192_4_fu_416_p1));
    add_ln1192_7_fu_432_p2 <= std_logic_vector(signed(sext_ln1192_6_fu_428_p1) + signed(sext_ln1192_3_fu_412_p1));
    add_ln1192_fu_484_p2 <= std_logic_vector(signed(sext_ln1192_14_fu_480_p1) + signed(sext_ln1192_7_fu_438_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(p_Val2_s_fu_490_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= p_Val2_s_fu_490_p3;
        end if; 
    end process;


    grp_fu_498_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_498_ce <= ap_const_logic_1;
        else 
            grp_fu_498_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_505_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_505_ce <= ap_const_logic_1;
        else 
            grp_fu_505_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_512_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_512_ce <= ap_const_logic_1;
        else 
            grp_fu_512_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_519_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_519_ce <= ap_const_logic_1;
        else 
            grp_fu_519_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_526_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_526_ce <= ap_const_logic_1;
        else 
            grp_fu_526_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_533_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_533_ce <= ap_const_logic_1;
        else 
            grp_fu_533_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_540_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_540_ce <= ap_const_logic_1;
        else 
            grp_fu_540_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_547_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_547_ce <= ap_const_logic_1;
        else 
            grp_fu_547_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_554_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_554_ce <= ap_const_logic_1;
        else 
            grp_fu_554_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_563_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_563_ce <= ap_const_logic_1;
        else 
            grp_fu_563_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_572_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_572_ce <= ap_const_logic_1;
        else 
            grp_fu_572_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_581_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_581_ce <= ap_const_logic_1;
        else 
            grp_fu_581_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_590_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_590_ce <= ap_const_logic_1;
        else 
            grp_fu_590_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_599_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_599_ce <= ap_const_logic_1;
        else 
            grp_fu_599_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_608_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_608_ce <= ap_const_logic_1;
        else 
            grp_fu_608_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_617_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_617_ce <= ap_const_logic_1;
        else 
            grp_fu_617_ce <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_s_fu_490_p3 <= (add_ln1192_fu_484_p2 & ap_const_lv3_0);
        sext_ln1192_10_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1192_10_fu_448_p2),27));

        sext_ln1192_11_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_608_p3),26));

        sext_ln1192_12_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_617_p3),26));

        sext_ln1192_13_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1192_13_fu_464_p2),27));

        sext_ln1192_14_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1192_14_fu_474_p2),28));

        sext_ln1192_1_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_554_p3),26));

        sext_ln1192_2_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_563_p3),26));

        sext_ln1192_3_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1192_3_fu_406_p2),27));

        sext_ln1192_4_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_572_p3),26));

        sext_ln1192_5_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_581_p3),26));

        sext_ln1192_6_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1192_6_fu_422_p2),27));

        sext_ln1192_7_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1192_7_fu_432_p2),28));

        sext_ln1192_8_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_590_p3),26));

        sext_ln1192_9_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_599_p3),26));

end behav;
